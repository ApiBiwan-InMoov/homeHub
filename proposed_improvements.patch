diff --git a/app/config.py b/app/config.py
index 1111111..2222222 100644
--- a/app/config.py
+++ b/app/config.py
@@ -1,29 +1,55 @@
-from pydantic import BaseModel
-from dotenv import load_dotenv
-import os
-
-load_dotenv()
-
-class Settings(BaseModel):
-    ipx_host: str = os.getenv("IPX_HOST", "192.168.1.50")
-    ipx_port: int = int(os.getenv("IPX_PORT", "80"))
-    ipx_user: str = os.getenv("IPX_USER", "")
-    ipx_pass: str = os.getenv("IPX_PASS", "")
-    ipx_lights_relay: int = int(os.getenv("IPX_LIGHTS_RELAY", "1"))
-    ipx_heating_relay: int = int(os.getenv("IPX_HEATING_RELAY", "2"))
-    ipx_poll_interval: float = float(os.getenv("IPX_POLL_INTERVAL", "2.0"))
-
-
-    google_calendar_id: str = os.getenv("GOOGLE_CALENDAR_ID", "")
-    google_oauth_client_secrets: str = os.getenv("GOOGLE_OAUTH_CLIENT_SECRETS", "secrets/client_secret.json")
-    google_token_file: str = os.getenv("GOOGLE_TOKEN_FILE", "secrets/token.json")
-
-    host: str = os.getenv("HOST", "0.0.0.0")
-    port: int = int(os.getenv("PORT", "8080"))
-    
-    latitude: float = float(os.getenv("LATITUDE", "50.716"))
-    longitude: float = float(os.getenv("LONGITUDE", "4.519"))
-    timezone: str = os.getenv("TIMEZONE", "Europe/Brussels")
-
-settings = Settings()
+from pydantic_settings import BaseSettings, SettingsConfigDict
+from pydantic import Field, field_validator
+from typing import Optional
+
+class Settings(BaseSettings):
+    """Typed application settings loaded from environment variables and .env.
+
+    Uses pydantic-settings for robust parsing/validation and a single source of truth.
+    """
+    # IPX800
+    ipx_host: str = Field(default="192.168.1.50")
+    ipx_port: int = Field(default=80)
+    ipx_user: str = Field(default="")
+    ipx_pass: str = Field(default="")
+    ipx_lights_relay: int = Field(default=1)
+    ipx_heating_relay: int = Field(default=2)
+    ipx_poll_interval: float = Field(default=2.0)
+
+    # Google
+    google_calendar_id: str = Field(default="")
+    google_oauth_client_secrets: str = Field(default="secrets/client_secret.json")
+    google_token_file: str = Field(default="secrets/token.json")
+
+    # Server
+    host: str = Field(default="0.0.0.0")
+    port: int = Field(default=8080)
+
+    # Location
+    latitude: float = Field(default=50.716)
+    longitude: float = Field(default=4.519)
+    timezone: str = Field(default="Europe/Brussels")
+
+    # pydantic-settings config
+    model_config = SettingsConfigDict(
+        env_file=".env", env_file_encoding="utf-8", case_sensitive=False, extra="ignore"
+    )
+
+    @field_validator("ipx_port", "port")
+    @classmethod
+    def _port_positive(cls, v: int) -> int:
+        if v <= 0 or v > 65535:
+            raise ValueError("Port must be between 1 and 65535")
+        return v
+
+settings = Settings()  # loaded once at import time
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..3333333
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,49 @@
+# Python
+__pycache__/
+*.py[cod]
+*.pyo
+*.pyd
+.Python
+.venv/
+env/
+venv/
+build/
+dist/
+*.egg-info/
+.mypy_cache/
+.pytest_cache/
+.ruff_cache/
+
+# Environment & secrets
+.env
+.env.*
+secrets/
+
+# IDE
+.idea/
+.vscode/
+
+# OS
+.DS_Store
+Thumbs.db
+
+# Node
+node_modules/
diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
new file mode 100644
index 0000000..4444444
--- /dev/null
+++ b/.pre-commit-config.yaml
@@ -0,0 +1,33 @@
+repos:
+  - repo: https://github.com/astral-sh/ruff-pre-commit
+    rev: v0.6.9
+    hooks:
+      - id: ruff
+        args: [--fix]
+      - id: ruff-format
+  - repo: https://github.com/pre-commit/pre-commit-hooks
+    rev: v4.6.0
+    hooks:
+      - id: check-merge-conflict
+      - id: end-of-file-fixer
+      - id: trailing-whitespace
+
diff --git a/ruff.toml b/ruff.toml
new file mode 100644
index 0000000..5555555
--- /dev/null
+++ b/ruff.toml
@@ -0,0 +1,27 @@
+target-version = "py312"
+line-length = 100
+
+[lint]
+select = ["E", "F", "I", "B", "UP", "N", "ASYNC"]
+ignore = ["E501"]
+
+[format]
+quote-style = "double"
+
+[isort]
+force-single-line = false
+known-first-party = ["app"]
+
diff --git a/mypy.ini b/mypy.ini
new file mode 100644
index 0000000..6666666
--- /dev/null
+++ b/mypy.ini
@@ -0,0 +1,20 @@
+[mypy]
+python_version = 3.12
+warn_return_any = True
+warn_unused_ignores = True
+disallow_untyped_defs = True
+no_implicit_optional = True
+strict_optional = True
+plugins = pydantic.mypy
+
+[mypy-app.*]
+ignore_missing_imports = True
+
diff --git a/tests/test_routers_smoke.py b/tests/test_routers_smoke.py
new file mode 100644
index 0000000..7777777
--- /dev/null
+++ b/tests/test_routers_smoke.py
@@ -0,0 +1,31 @@
+from fastapi.testclient import TestClient
+import importlib
+
+def get_app():
+    mod = importlib.import_module("app.main")
+    return getattr(mod, "app")
+
+def test_index_ok():
+    client = TestClient(get_app())
+    r = client.get("/")
+    assert r.status_code == 200
+
+def test_health_ok():
+    client = TestClient(get_app())
+    r = client.get("/health")
+    assert r.status_code in (200, 204)
+
diff --git a/docker/Dockerfile b/docker/Dockerfile
new file mode 100644
index 0000000..8888888
--- /dev/null
+++ b/docker/Dockerfile
@@ -0,0 +1,33 @@
+FROM python:3.12-slim
+WORKDIR /app
+
+# System deps (optional: audio libs for vosk/sounddevice if used at runtime)
+RUN apt-get update && apt-get install -y --no-install-recommends \+    build-essential \+    libasound2-dev \+    && rm -rf /var/lib/apt/lists/*
+
+COPY requirements.txt ./
+RUN pip install --no-cache-dir -r requirements.txt
+
+COPY . .
+ENV PYTHONUNBUFFERED=1
+ENV PYTHONDONTWRITEBYTECODE=1
+
+EXPOSE 8080
+CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8080"]
diff --git a/docker-compose.yml b/docker-compose.yml
new file mode 100644
index 0000000..9999999
--- /dev/null
+++ b/docker-compose.yml
@@ -0,0 +1,16 @@
+services:
+  homehub:
+    build: ./docker
+    env_file:
+      - .env
+    ports:
+      - "8080:8080"
+    volumes:
+      - ./secrets:/app/secrets:ro
+      - ./app:/app/app:rw
+    restart: unless-stopped
+
